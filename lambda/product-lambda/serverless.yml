service: product-lambda
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:eu-west-1:262737713977:table/products"
            - "arn:aws:dynamodb:eu-west-1:262737713977:table/stocks"

  environment:
    TABLE_PRODUCTS: products
    TABLE_STOCKS: stocks

resources:
  Resources:
    catalogBatchProcessQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "catalogBatchProcessQueue"
    createProductTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: "createProductTopic"
    createProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
          Endpoint: Andrii_Bartish@epam.com
          Protocol: email
          TopicArn: {"Ref": "createProductTopic"}
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    stocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getProductList:
    handler: src/handlers/getProductList.getProductList
    events:
      - httpApi:
          path: /products
          method: get
  getProductById:
    handler: src/handlers/getProductById.getProductById
    events:
      - httpApi:
          path: /product/{productId}
          method: get
  catalogBatchProcess:
    handler: rc/handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt: 
              - catalogBatchProcessQueue
              - Arn
          batchSize: 5

